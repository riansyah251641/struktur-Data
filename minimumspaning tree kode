// pii pair of integer, integer
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
int dist[10];
vector<pii> v[10];

void addEdge(int a, int b, int c)
{
    v[a].push_back({c, b});
    v[b].push_back({c, a});
}
void dijkstra(int s, int n)
{
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    set<int> seen;
    memset(dist, -1, sizeof(dist));
    dist[s] = 0;
    pq.push({0, s});
    while (!pq.empty())
    {
        pii now = pq.top();
        pq.pop();
        if (seen.find(now.second) != seen.end())
            continue;
        seen.insert(now.second);
        for (int i = 0; i < v[now.second].size(); i++)
        {
            int next = v[now.second][i].second;
            int cost = v[now.second][i].first;

            if (now.first + cost < dist[next] || dist[next] == -1)
            {
                dist[next] = now.first + cost;
                pq.push({dist[next], next});
            }
        }
    }
    for (int i = 0; i < n; i++)
    {
        cout << "from " << s << " to " << i << " : " << dist[i] << endl;
    }
    return;
}
int main()
{
    int n;
    addEdge(0, 1, 4);
    addEdge(0, 7, 8);
    addEdge(1, 2, 8);
    addEdge(1, 7, 11);
    addEdge(2, 3, 7);
    addEdge(2, 8, 2);
    addEdge(2, 5, 4);
    addEdge(3, 4, 9);
    addEdge(3, 5, 14);
    addEdge(4, 5, 10);
    addEdge(5, 6, 2);
    addEdge(6, 7, 1);
    addEdge(6, 8, 6);
    addEdge(7, 8, 7);
    dijkstra(5, 8);
}



int DFS(int currNode)
{
	if(memo[currNode] > -1) return memo[currNode];
	int maxDist = 0;
	
	for(int i = 0; i < adjList[currNode].size(); ++i)
	{
		int nextNode = adjList[currNode][i];
		maxDist = max(maxDist, DFS(nextNode) + 1);
	}
	return memo[currNode] = maxDist;
}

// pertama
vector<pair<int,int>> adjList[N];
bool visited[N];

void dfs(int curVertex)
{
    //menandai bahwa vertex ini sudah pernah dikunjungi
    visited[curVertex] = 1; //Perhatikan baris ini untuk trivia question
    for (int i = 0 ; i < adjList[curVertex].size() ; i++) //menelusuri daftar vertex yang terhubung dengan curVertex
    {
        int nextVertex = adjList[curVertex][i].first;
        //perhatikan bahwa dalam pair,
        // first merupakan nomor vertex serta second
        //merupakan weightnya
        if (!visited[nextVertex]) //mengecek jika belum dikunjungi
        {
            dfs(adjList[nextVertex]);
            //do something
        }
    }
    //do something
}

// kedua




// source kode pertama

#include <bits/stdc++.h>
using namespace std;
#define vi vector<int>
#define pb push_back

vector<vi> adjList;
vector<int> memo;

int DFS(int currNode)
{
	if(memo[currNode] > -1) return memo[currNode];
	int maxDist = 0;
	
	for(int i = 0; i < adjList[currNode].size(); ++i)
	{
		int nextNode = adjList[currNode][i];
		maxDist = max(maxDist, DFS(nextNode) + 1);
	}
	return memo[currNode] = maxDist;
}

int main()
{
	int n;
	cin >> n;
	
	adjList.assign(n + 1, vi());
	memo.assign(n + 1, -1);
	
	for(int i = 1; i <= n - 1; ++i)
	{
		int a, b;
		cin >> a >> b;
		adjList[a].pb(b);
	}
	int ans = 0;
	
	for(int i = 1; i <= n; ++i){
		ans = max(ans, DFS(i));
	}
	cout << ans << endl;
	return 0;
}



// sourcode dfs kedua

#include <bits/stdc++.h>
using namespace std;
#define vi vector<int>
#define vb vector<bool>
#define pb push_back

int dr[] = {-1, 0, 1, 0},
	dc[] = {0, 1, 0, -1};

vector<vi> tanah(10, vi(10));
vector<vb> visited(10, vb(10));

bool keluar(int r, int c)
{
	return (r < 0 or r > 9 or c < 0 or c > 9);
}

void DFS(int r, int c)
{
	for(int i = 0; i < 4; ++i)
	{
		int next_r = r + dr[i],
			next_c = c + dc[i];
		if(keluar(next_r, next_c)) continue;
		
		if(!visited[next_r][next_c] and tanah[next_r][next_c] == 1)
		{
			visited[next_r][next_c] = 1;
			DFS(next_r, next_c);
		}
	}
}

int main()
{
	for(int i = 0; i < 10; ++i){
		for(int j = 0; j < 10; ++j)
			cin >> tanah[i][j];
	}
	int pulau = 0;
	
	for(int i = 0; i < 10; ++i){
		for(int j = 0; j < 10; ++j)
		{
			if(!visited[i][j] and tanah[i][j] == 1)
			{
				visited[i][j] = 1;
				DFS(i, j);
				pulau++;
			}
		}
	}
	cout << pulau << endl;
	return 0;
}
